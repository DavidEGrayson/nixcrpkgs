diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/common/clang-mac.conf qtbase-everywhere-src-5.12.4/mkspecs/common/clang-mac.conf
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/common/clang-mac.conf	2022-09-05 17:16:33.700000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/common/clang-mac.conf	2022-09-05 17:55:58.140000000 -0700
@@ -6,8 +6,6 @@
 
 QMAKE_XCODE_GCC_VERSION = com.apple.compilers.llvm.clang.1_0
 
-QMAKE_CXXFLAGS += -stdlib=libc++
-QMAKE_LFLAGS   += -stdlib=libc++
 QMAKE_AR_LTCG  = libtool -static -o
 
 QMAKE_CFLAGS_APPLICATION_EXTENSION  = -fapplication-extension
diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/common/macx.conf qtbase-everywhere-src-5.12.4/mkspecs/common/macx.conf
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/common/macx.conf	2022-09-05 17:16:33.700000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/common/macx.conf	2022-09-05 17:56:48.572000000 -0700
@@ -5,7 +5,7 @@
 QMAKE_PLATFORM         += macos osx macx
 QMAKE_MAC_SDK           = macosx
 
-QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.12
+QMAKE_MACOSX_DEPLOYMENT_TARGET = 11.0
 QMAKE_APPLE_DEVICE_ARCHS = x86_64
 QT_MAC_SDK_VERSION_MIN = 10.13
 QT_MAC_SDK_VERSION_MAX = 10.14
diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/default_post.prf qtbase-everywhere-src-5.12.4/mkspecs/features/mac/default_post.prf
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/default_post.prf	2022-09-05 17:16:33.704000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/features/mac/default_post.prf	2022-09-05 17:55:58.144000000 -0700
@@ -3,7 +3,7 @@
 contains(TEMPLATE, .*app) {
     !macx-xcode:if(isEmpty(BUILDS)|build_pass) {
         # Detect changes to the platform SDK
-        QMAKE_EXTRA_VARIABLES += QMAKE_MAC_SDK QMAKE_MAC_SDK_VERSION QMAKE_XCODE_DEVELOPER_PATH
+        QMAKE_EXTRA_VARIABLES += QMAKE_MAC_SDK QMAKE_MAC_SDK_VERSION
         QMAKE_EXTRA_INCLUDES += $$shell_quote($$PWD/sdk.mk)
     }
 
@@ -41,29 +41,6 @@
 
 !no_objective_c:CONFIG += objective_c
 
-qt {
-    qtConfig(static) {
-        # C++11 support means using libc++ instead of libstd++. As the
-        # two libraries are incompatible we need to ensure the end user
-        # project is built using the same C++11 support/no support as Qt.
-        qtConfig(c++11) {
-            CONFIG += c++11
-        } else: c++11 {
-            warning("Qt was not built with C++11 enabled, disabling feature")
-            CONFIG -= c++11
-        }
-
-        !c++11 {
-            # Explicitly use libstdc++ if C++11 support is not enabled,
-            # as otherwise the compiler will choose the standard library
-            # based on the deployment target, which for iOS 7 and OS X 10.9
-            # is libc++, and we can't mix and match the two.
-            QMAKE_CXXFLAGS += -stdlib=libstdc++
-            QMAKE_LFLAGS   += -stdlib=libstdc++
-        }
-    }
-}
-
 # Add the same default rpaths as Xcode does for new projects.
 # This is especially important for iOS/tvOS/watchOS where no other option is possible.
 !no_default_rpath {
@@ -151,10 +128,6 @@
 
     arch_flags = $(EXPORT_ARCH_ARGS)
 
-    QMAKE_CFLAGS += $$arch_flags
-    QMAKE_CXXFLAGS += $$arch_flags
-    QMAKE_LFLAGS += $$arch_flags
-
     QMAKE_PCH_ARCHS = $$VALID_ARCHS
 
     macos: deployment_target = $$QMAKE_MACOSX_DEPLOYMENT_TARGET
@@ -202,9 +175,6 @@
                 QMAKE_XARCH_LFLAGS_$${arch}
         }
 
-        QMAKE_CFLAGS += $(EXPORT_QMAKE_XARCH_CFLAGS)
-        QMAKE_CXXFLAGS += $(EXPORT_QMAKE_XARCH_CFLAGS)
-        QMAKE_LFLAGS += $(EXPORT_QMAKE_XARCH_LFLAGS)
     } else {
         simulator: \
             version_identifier = $$simulator.deployment_identifier
@@ -244,10 +214,6 @@
     QMAKE_PCH_OUTPUT_EXT = _${QMAKE_PCH_ARCH}$${QMAKE_PCH_OUTPUT_EXT}
 }
 
-cache(QMAKE_XCODE_DEVELOPER_PATH, stash)
-!isEmpty(QMAKE_XCODE_VERSION): \
-    cache(QMAKE_XCODE_VERSION, stash)
-
 QMAKE_XCODE_LIBRARY_SUFFIX = $$qtPlatformTargetSuffix()
 
 xcode_product_bundle_identifier_setting.name = PRODUCT_BUNDLE_IDENTIFIER
diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/default_pre.prf qtbase-everywhere-src-5.12.4/mkspecs/features/mac/default_pre.prf
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/default_pre.prf	2022-09-05 17:16:33.704000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/features/mac/default_pre.prf	2022-09-05 17:55:58.144000000 -0700
@@ -1,43 +1,6 @@
 CONFIG = asset_catalogs rez $$CONFIG
 load(default_pre)
 
-isEmpty(QMAKE_XCODE_DEVELOPER_PATH) {
-    # Get path of Xcode's Developer directory
-    QMAKE_XCODE_DEVELOPER_PATH = $$system("/usr/bin/xcode-select --print-path 2>/dev/null")
-    isEmpty(QMAKE_XCODE_DEVELOPER_PATH): \
-        error("Xcode path is not set. Please use xcode-select to choose Xcode installation path.")
-
-    # Make sure Xcode path is valid
-    !exists($$QMAKE_XCODE_DEVELOPER_PATH): \
-        error("Xcode is not installed in $${QMAKE_XCODE_DEVELOPER_PATH}. Please use xcode-select to choose Xcode installation path.")
-}
-
-isEmpty(QMAKE_XCODEBUILD_PATH): \
-    QMAKE_XCODEBUILD_PATH = $$system("/usr/bin/xcrun -find xcodebuild 2>/dev/null")
-
-!isEmpty(QMAKE_XCODEBUILD_PATH) {
-    # Make sure Xcode is set up properly
-    !system("/usr/bin/xcrun xcodebuild -license check 2>/dev/null"): \
-        error("Xcode not set up properly. You need to confirm the license agreement by running 'sudo xcrun xcodebuild -license accept'.")
-
-    isEmpty(QMAKE_XCODE_VERSION) {
-        # Extract Xcode version using xcodebuild
-        xcode_version = $$system("/usr/bin/xcrun xcodebuild -version")
-        QMAKE_XCODE_VERSION = $$member(xcode_version, 1)
-        isEmpty(QMAKE_XCODE_VERSION): error("Could not resolve Xcode version.")
-        unset(xcode_version)
-    }
-}
-
-isEmpty(QMAKE_TARGET_BUNDLE_PREFIX) {
-    QMAKE_XCODE_PREFERENCES_FILE = $$(HOME)/Library/Preferences/com.apple.dt.Xcode.plist
-    exists($$QMAKE_XCODE_PREFERENCES_FILE): \
-        QMAKE_TARGET_BUNDLE_PREFIX = $$system("/usr/libexec/PlistBuddy -c 'print IDETemplateOptions:bundleIdentifierPrefix' $$QMAKE_XCODE_PREFERENCES_FILE 2>/dev/null")
-
-    !isEmpty(_QMAKE_CACHE_):!isEmpty(QMAKE_TARGET_BUNDLE_PREFIX): \
-        cache(QMAKE_TARGET_BUNDLE_PREFIX)
-}
-
 QMAKE_ASSET_CATALOGS_APP_ICON = AppIcon
 
 # Make the default debug info format for static debug builds
diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/sdk.mk qtbase-everywhere-src-5.12.4/mkspecs/features/mac/sdk.mk
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/sdk.mk	2022-09-05 17:16:33.704000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/features/mac/sdk.mk	2022-09-05 17:55:58.144000000 -0700
@@ -1,7 +1,7 @@
 
 ifeq ($(QT_MAC_SDK_NO_VERSION_CHECK),)
-    CHECK_SDK_COMMAND = /usr/bin/xcrun --sdk $(EXPORT_QMAKE_MAC_SDK) -show-sdk-version 2>&1
-    CURRENT_MAC_SDK_VERSION := $(shell DEVELOPER_DIR=$(EXPORT_QMAKE_XCODE_DEVELOPER_PATH) $(CHECK_SDK_COMMAND))
+    CHECK_SDK_COMMAND = false
+    CURRENT_MAC_SDK_VERSION := $(EXPORT_QMAKE_MAC_SDK_VERSION)
     ifneq ($(CURRENT_MAC_SDK_VERSION),$(EXPORT_QMAKE_MAC_SDK_VERSION))
         # We don't want to complain about out of date SDK unless the target needs to be remade.
         # This covers use-cases such as running 'make check' after moving the build to a
diff -ru qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/sdk.prf qtbase-everywhere-src-5.12.4/mkspecs/features/mac/sdk.prf
--- qtbase-everywhere-src-5.12.4-orig/mkspecs/features/mac/sdk.prf	2022-09-05 17:16:33.704000000 -0700
+++ qtbase-everywhere-src-5.12.4/mkspecs/features/mac/sdk.prf	2022-09-05 17:55:58.144000000 -0700
@@ -18,7 +18,7 @@
         sdk = $$QMAKE_MAC_SDK
 
     isEmpty(QMAKE_MAC_SDK.$${sdk}.$${info}) {
-        QMAKE_MAC_SDK.$${sdk}.$${info} = $$system("/usr/bin/xcrun --sdk $$sdk $$infoarg 2>/dev/null")
+        QMAKE_MAC_SDK.$${sdk}.$${info} = $$system("xcrun --sdk $$sdk $$infoarg 2>/dev/null")
         # --show-sdk-platform-path won't work for Command Line Tools; this is fine
         # only used by the XCTest backend to testlib
         isEmpty(QMAKE_MAC_SDK.$${sdk}.$${info}):if(!isEmpty(QMAKE_XCODEBUILD_PATH)|!equals(infoarg, "--show-sdk-platform-path")): \
@@ -53,7 +53,7 @@
     value = $$eval($$tool)
     isEmpty(value): next()
 
-    sysrooted = $$system("/usr/bin/xcrun -sdk $$QMAKE_MAC_SDK -find $$first(value) 2>/dev/null")
+    sysrooted = $$system("xcrun -sdk $$QMAKE_MAC_SDK -find $$first(value) 2>/dev/null")
     isEmpty(sysrooted): next()
 
     $$tool = $$sysrooted $$member(value, 1, -1)
